{"/home/travis/build/npmtest/node-npmtest-postcss-modules/test.js":"/* istanbul instrument in package npmtest_postcss_modules */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-modules/lib.npmtest_postcss_modules.js":"/* istanbul instrument in package npmtest_postcss_modules */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_postcss_modules = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_postcss_modules = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-modules/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-postcss-modules && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_postcss_modules */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_postcss_modules\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_postcss_modules.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_postcss_modules.rollup.js'] =\n            local.assetsDict['/assets.npmtest_postcss_modules.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_postcss_modules.__dirname + '/lib.npmtest_postcss_modules.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-modules/node_modules/postcss-modules/build/index.js":"'use strict';\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _parser = require('css-modules-loader-core/lib/parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nvar _fileSystemLoader = require('css-modules-loader-core/lib/file-system-loader');\n\nvar _fileSystemLoader2 = _interopRequireDefault(_fileSystemLoader);\n\nvar _genericNames = require('generic-names');\n\nvar _genericNames2 = _interopRequireDefault(_genericNames);\n\nvar _generateScopedName = require('./generateScopedName');\n\nvar _generateScopedName2 = _interopRequireDefault(_generateScopedName);\n\nvar _saveJSON = require('./saveJSON');\n\nvar _saveJSON2 = _interopRequireDefault(_saveJSON);\n\nvar _behaviours = require('./behaviours');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar PLUGIN_NAME = 'postcss-modules';\n\nfunction getDefaultScopeBehaviour(opts) {\n  if (opts.scopeBehaviour && (0, _behaviours.isValidBehaviour)(opts.scopeBehaviour)) {\n    return opts.scopeBehaviour;\n  }\n\n  return _behaviours.behaviours.LOCAL;\n}\n\nfunction getScopedNameGenerator(opts) {\n  var scopedNameGenerator = opts.generateScopedName || _generateScopedName2.default;\n\n  if (typeof scopedNameGenerator === 'function') return scopedNameGenerator;\n  return (0, _genericNames2.default)(scopedNameGenerator, { context: process.cwd() });\n}\n\nfunction getLoader(opts, plugins) {\n  var root = opts.root || '/';\n  return typeof opts.Loader === 'function' ? new opts.Loader(root, plugins) : new _fileSystemLoader2.default(root, plugins);\n}\n\nfunction isGlobalModule(globalModules, inputFile) {\n  return globalModules.some(function (regex) {\n    return inputFile.match(regex);\n  });\n}\n\nfunction getDefaultPluginsList(opts, inputFile) {\n  var globalModulesList = opts.globalModulePaths || null;\n  var defaultBehaviour = getDefaultScopeBehaviour(opts);\n  var generateName = getScopedNameGenerator(opts);\n\n  if (globalModulesList && isGlobalModule(globalModulesList, inputFile)) {\n    return (0, _behaviours.getDefaultPlugins)(_behaviours.behaviours.GLOBAL, generateName);\n  }\n\n  return (0, _behaviours.getDefaultPlugins)(defaultBehaviour, generateName);\n}\n\nfunction isResultPlugin(plugin) {\n  return plugin.postcssPlugin !== PLUGIN_NAME;\n}\n\nmodule.exports = _postcss2.default.plugin(PLUGIN_NAME, function () {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var getJSON = opts.getJSON || _saveJSON2.default;\n\n  return function (css, result) {\n    var inputFile = css.source.input.file;\n    var resultPlugins = result.processor.plugins.filter(isResultPlugin);\n    var pluginList = getDefaultPluginsList(opts, inputFile);\n    var plugins = [].concat(_toConsumableArray(pluginList), _toConsumableArray(resultPlugins));\n    var loader = getLoader(opts, plugins);\n    var parser = new _parser2.default(loader.fetch.bind(loader));\n\n    return new Promise(function (resolve, reject) {\n      (0, _postcss2.default)([].concat(_toConsumableArray(plugins), [parser.plugin])).process(css, { from: inputFile }).then(function () {\n        var out = loader.finalSource;\n        if (out) css.prepend(out);\n\n        getJSON(css.source.input.file, parser.exportTokens);\n\n        resolve();\n      }, reject);\n    });\n  };\n});","/home/travis/build/npmtest/node-npmtest-postcss-modules/node_modules/postcss-modules-local-by-default/index.js":"var postcss = require('postcss');\nvar Tokenizer = require('css-selector-tokenizer');\n\nfunction normalizeNodeArray(nodes) {\n  var array = [];\n  nodes.forEach(function(x) {\n    if(Array.isArray(x)) {\n      normalizeNodeArray(x).forEach(function(item) {\n        array.push(item);\n      });\n    } else if(x) {\n      array.push(x);\n    }\n  });\n  if(array.length > 0 && array[array.length - 1].type === 'spacing') {\n    array.pop();\n  }\n  return array;\n}\n\nfunction localizeNode(node, context) {\n  if(context.ignoreNextSpacing && node.type !== 'spacing') {\n    throw new Error('Missing whitespace after :' + context.ignoreNextSpacing);\n  }\n  if(context.enforceNoSpacing && node.type === 'spacing') {\n    throw new Error('Missing whitespace before :' + context.enforceNoSpacing);\n  }\n\n  var newNodes;\n  switch(node.type) {\n    case 'selectors':\n      var resultingGlobal;\n      context.hasPureGlobals = false;\n      newNodes = node.nodes.map(function(n) {\n        var nContext = {\n          global: context.global,\n          lastWasSpacing: true,\n          hasLocals: false,\n          explicit: false\n        };\n        n = localizeNode(n, nContext);\n        if(typeof resultingGlobal === 'undefined') {\n          resultingGlobal = nContext.global;\n        } else if(resultingGlobal !== nContext.global) {\n          throw new Error('Inconsistent rule global/local result in rule \"' +\n            Tokenizer.stringify(node) + '\" (multiple selectors must result in the same mode for the rule)');\n        }\n        if(!nContext.hasLocals) {\n          context.hasPureGlobals = true;\n        }\n        return n;\n      });\n      context.global = resultingGlobal;\n      node = Object.create(node);\n      node.nodes = normalizeNodeArray(newNodes);\n      break;\n\n    case 'selector':\n      newNodes = node.nodes.map(function(n) {\n        return localizeNode(n, context);\n      });\n      node = Object.create(node);\n      node.nodes = normalizeNodeArray(newNodes);\n      break;\n\n    case 'spacing':\n      if(context.ignoreNextSpacing) {\n        context.ignoreNextSpacing = false;\n        context.lastWasSpacing = false;\n        context.enforceNoSpacing = false;\n        return null;\n      }\n      context.lastWasSpacing = true;\n      return node;\n\n    case 'pseudo-class':\n      if(node.name === 'local' || node.name === 'global') {\n        if(context.inside) {\n          throw new Error('A :' + node.name + ' is not allowed inside of a :' + context.inside + '(...)');\n        }\n        context.ignoreNextSpacing = context.lastWasSpacing ? node.name : false;\n        context.enforceNoSpacing = context.lastWasSpacing ? false : node.name;\n        context.global = (node.name === 'global');\n        context.explicit = true;\n        return null;\n      }\n      break;\n\n    case 'nested-pseudo-class':\n      var subContext;\n      if(node.name === 'local' || node.name === 'global') {\n        if(context.inside) {\n          throw new Error('A :' + node.name + '(...) is not allowed inside of a :' + context.inside + '(...)');\n        }\n        subContext = {\n          global: (node.name === 'global'),\n          inside: node.name,\n          hasLocals: false,\n          explicit: true\n        };\n        node = node.nodes.map(function(n) {\n          return localizeNode(n, subContext);\n        });\n        // don't leak spacing\n        node[0].before = undefined;\n        node[node.length - 1].after = undefined;\n      } else {\n        subContext = {\n          global: context.global,\n          inside: context.inside,\n          lastWasSpacing: true,\n          hasLocals: false,\n          explicit: context.explicit\n        };\n        newNodes = node.nodes.map(function(n) {\n          return localizeNode(n, subContext);\n        });\n        node = Object.create(node);\n        node.nodes = normalizeNodeArray(newNodes);\n      }\n      if(subContext.hasLocals) {\n        context.hasLocals = true;\n      }\n      break;\n\n    case 'id':\n    case 'class':\n      if(!context.global) {\n        node = {\n          type: 'nested-pseudo-class',\n          name: 'local',\n          nodes: [node]\n        };\n        context.hasLocals = true;\n      }\n      break;\n  }\n\n  // reset context\n  context.lastWasSpacing = false;\n  context.ignoreNextSpacing = false;\n  context.enforceNoSpacing = false;\n  return node;\n}\n\nfunction localizeDeclNode(node, context) {\n  var newNode;\n  switch(node.type) {\n    case 'item':\n      if(context.localizeNextItem) {\n        newNode = Object.create(node);\n        newNode.name = ':local(' + newNode.name + ')';\n        context.localizeNextItem = false;\n        return newNode;\n      }\n      break;\n\n    case 'nested-item':\n      var newNodes = node.nodes.map(function(n) {\n        return localizeDeclValue(n, context);\n      });\n      node = Object.create(node);\n      node.nodes = newNodes;\n      break;\n\n    case 'url':\n      if(context.options && context.options.rewriteUrl) {\n        newNode = Object.create(node);\n        newNode.url = context.options.rewriteUrl(context.global, node.url);\n        return newNode;\n      }\n      break;\n  }\n  return node;\n}\n\nfunction localizeDeclValue(valueNode, context) {\n  var newValueNode = Object.create(valueNode);\n  newValueNode.nodes = valueNode.nodes.map(function(node) {\n    return localizeDeclNode(node, context);\n  });\n  return newValueNode;\n}\n\nfunction localizeAnimationShorthandDeclValueNodes(nodes, context) {\n  var validIdent = validIdent = /^-?[_a-z][_a-z0-9-]*$/i;\n\n  /*\n  The spec defines some keywords that you can use to describe properties such as the timing\n  function. These are still valid animation names, so as long as there is a property that accepts\n  a keyword, it is given priority. Only when all the properties that can take a keyword are\n  exhausted can the animation name be set to the keyword. I.e.\n\n  animation: infinite infinite;\n\n  The animation will repeat an infinite number of times from the first argument, and will have an\n  animation name of infinite from the second.\n  */\n  var animationKeywords = {\n    '$alternate': 1,\n    '$alternate-reverse': 1,\n    '$backwards': 1,\n    '$both': 1,\n    '$ease': 1,\n    '$ease-in': 1,\n    '$ease-in-out': 1,\n    '$ease-out': 1,\n    '$forwards': 1,\n    '$infinite': 1,\n    '$linear': 1,\n    '$none': Infinity, // No matter how many times you write none, it will never be an animation name\n    '$normal': 1,\n    '$paused': 1,\n    '$reverse': 1,\n    '$running': 1,\n    '$step-end': 1,\n    '$step-start': 1,\n    '$initial': Infinity,\n    '$inherit': Infinity,\n    '$unset': Infinity,\n  };\n\n  var didParseAnimationName = false;\n  var parsedAnimationKeywords = {};\n  return nodes.map(function(valueNode) {\n    var value = valueNode.type === 'item'\n      ? valueNode.name.toLowerCase()\n      : null;\n\n    var shouldParseAnimationName = false;\n\n    if (!didParseAnimationName && value && validIdent.test(value)) {\n      if ('$' + value in animationKeywords) {\n        parsedAnimationKeywords['$' + value] = ('$' + value in parsedAnimationKeywords)\n          ? (parsedAnimationKeywords['$' + value] + 1)\n          : 0;\n\n        shouldParseAnimationName = (parsedAnimationKeywords['$' + value] >= animationKeywords['$' + value]);\n      } else {\n        shouldParseAnimationName = true;\n      }\n    }\n\n    var subContext = {\n      options: context.options,\n      global: context.global,\n      localizeNextItem: shouldParseAnimationName && !context.global\n    };\n    return localizeDeclNode(valueNode, subContext);\n  });\n}\n\nfunction localizeAnimationShorthandDeclValues(valuesNode, decl, context) {\n  var newValuesNode = Object.create(valuesNode);\n  newValuesNode.nodes = valuesNode.nodes.map(function(valueNode, index) {\n    var newValueNode = Object.create(valueNode);\n    newValueNode.nodes = localizeAnimationShorthandDeclValueNodes(valueNode.nodes, context);\n    return newValueNode;\n  });\n  decl.value = Tokenizer.stringifyValues(newValuesNode);\n}\n\nfunction localizeDeclValues(localize, valuesNode, decl, context) {\n  var newValuesNode = Object.create(valuesNode);\n  newValuesNode.nodes = valuesNode.nodes.map(function(valueNode) {\n    var subContext = {\n      options: context.options,\n      global: context.global,\n      localizeNextItem: localize && !context.global\n    };\n    return localizeDeclValue(valueNode, subContext);\n  });\n  decl.value = Tokenizer.stringifyValues(newValuesNode);\n}\n\nfunction localizeDecl(decl, context) {\n  var valuesNode = Tokenizer.parseValues(decl.value);\n\n  var isAnimation = /animation?$/.test(decl.prop);\n  if (isAnimation) return localizeAnimationShorthandDeclValues(valuesNode, decl, context);\n\n  var isAnimationName = /animation(-name)?$/.test(decl.prop);\n  if (isAnimationName) return localizeDeclValues(true, valuesNode, decl, context);\n\n  return localizeDeclValues(false, valuesNode, decl, context);\n}\n\nmodule.exports = postcss.plugin('postcss-modules-local-by-default', function (options) {\n  if (typeof options !== 'object') {\n    options = {}; // If options is undefined or not an object the plugin fails\n  }\n  if(options && options.mode) {\n    if(options.mode !== 'global' && options.mode !== 'local' && options.mode !== 'pure') {\n      throw new Error('options.mode must be either \"global\", \"local\" or \"pure\" (default \"local\")');\n    }\n  }\n  var pureMode = options && options.mode === 'pure';\n  var globalMode = options && options.mode === 'global';\n  return function(css) {\n    css.walkAtRules(function(atrule) {\n      if(/keyframes$/.test(atrule.name)) {\n        var globalMatch = /^\\s*:global\\s*\\((.+)\\)\\s*$/.exec(atrule.params);\n        var localMatch = /^\\s*:local\\s*\\((.+)\\)\\s*$/.exec(atrule.params);\n        var globalKeyframes = globalMode;\n        if(globalMatch) {\n          if(pureMode) {\n            throw atrule.error('@keyframes :global(...) is not allowed in pure mode');\n          }\n          atrule.params = globalMatch[1];\n          globalKeyframes = true;\n        } else if(localMatch) {\n          atrule.params = localMatch[0];\n          globalKeyframes = false;\n        } else if(!globalMode) {\n          atrule.params = ':local(' + atrule.params + ')';\n        }\n        atrule.walkDecls(function(decl) {\n          localizeDecl(decl, {\n            options: options,\n            global: globalKeyframes\n          });\n        });\n      } else if(atrule.nodes) {\n        atrule.nodes.forEach(function(decl) {\n          if(decl.type === 'decl') {\n            localizeDecl(decl, {\n              options: options,\n              global: globalMode\n            });\n          }\n        });\n      }\n    });\n    css.walkRules(function(rule) {\n      if(rule.parent.type === 'atrule' && /keyframes$/.test(rule.parent.name)) {\n        // ignore keyframe rules\n        return;\n      }\n      var selector = Tokenizer.parse(rule.selector);\n      var context = {\n        options: options,\n        global: globalMode,\n        hasPureGlobals: false\n      };\n      var newSelector;\n      try {\n        newSelector = localizeNode(selector, context);\n      } catch(e) {\n        throw rule.error(e.message);\n      }\n      if(pureMode && context.hasPureGlobals) {\n        throw rule.error('Selector \"' + Tokenizer.stringify(selector) + '\" is not pure ' +\n          '(pure selectors must contain at least one local class or id)');\n      }\n      // Less-syntax mixins parse as rules with no nodes\n      if (rule.nodes) {\n        rule.nodes.forEach(function(decl) {\n          localizeDecl(decl, context);\n        });\n      }\n      rule.selector = Tokenizer.stringify(newSelector);\n    });\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-postcss-modules/node_modules/postcss-modules-extract-imports/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar declWhitelist = ['composes'],\n    declFilter = new RegExp('^(' + declWhitelist.join('|') + ')$'),\n    matchImports = /^(.+?)\\s+from\\s+(?:\"([^\"]+)\"|'([^']+)'|(global))$/,\n    icssImport = /^:import\\((?:\"([^\"]+)\"|'([^']+)')\\)/;\n\nvar processor = _postcss2['default'].plugin('modules-extract-imports', function (options) {\n  return function (css) {\n    var imports = {},\n        importIndex = 0,\n        createImportedName = options && options.createImportedName || function (importName /*, path*/) {\n      return 'i__imported_' + importName.replace(/\\W/g, '_') + '_' + importIndex++;\n    };\n\n    // Find any declaration that supports imports\n    css.walkDecls(declFilter, function (decl) {\n      var matches = decl.value.match(matchImports);\n      var tmpSymbols = undefined;\n      if (matches) {\n        var _matches = _slicedToArray(matches, 5);\n\n        var symbols = _matches[1];\n        var doubleQuotePath = _matches[2];\n        var singleQuotePath = _matches[3];\n        var _global = _matches[4];\n\n        if (_global) {\n          // Composing globals simply means changing these classes to wrap them in global(name)\n          tmpSymbols = symbols.split(/\\s+/).map(function (s) {\n            return 'global(' + s + ')';\n          });\n        } else {\n          (function () {\n            var path = doubleQuotePath || singleQuotePath;\n            imports[path] = imports[path] || {};\n            tmpSymbols = symbols.split(/\\s+/).map(function (s) {\n              if (!imports[path][s]) {\n                imports[path][s] = createImportedName(s, path);\n              }\n              return imports[path][s];\n            });\n          })();\n        }\n        decl.value = tmpSymbols.join(' ');\n      }\n    });\n\n    // If we've found any imports, insert or append :import rules\n    var existingImports = {};\n    css.walkRules(function (rule) {\n      var matches = icssImport.exec(rule.selector);\n      if (matches) {\n        var _matches2 = _slicedToArray(matches, 3);\n\n        var doubleQuotePath = _matches2[1];\n        var singleQuotePath = _matches2[2];\n\n        existingImports[doubleQuotePath || singleQuotePath] = rule;\n      }\n    });\n\n    Object.keys(imports).reverse().forEach(function (path) {\n\n      var rule = existingImports[path];\n      if (!rule) {\n        rule = _postcss2['default'].rule({\n          selector: ':import(\"' + path + '\")',\n          raws: { after: '\\n' }\n        });\n        css.prepend(rule);\n      }\n      Object.keys(imports[path]).forEach(function (importedSymbol) {\n        rule.push(_postcss2['default'].decl({\n          value: importedSymbol,\n          prop: imports[path][importedSymbol],\n          raws: { before: '\\n  ' },\n          _autoprefixerDisabled: true\n        }));\n      });\n    });\n  };\n});\n\nexports['default'] = processor;\nmodule.exports = exports['default'];\n/*match*/ /*match*/","/home/travis/build/npmtest/node-npmtest-postcss-modules/node_modules/postcss-modules-scope/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _cssSelectorTokenizer = require('css-selector-tokenizer');\n\nvar _cssSelectorTokenizer2 = _interopRequireDefault(_cssSelectorTokenizer);\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getSingleLocalNamesForComposes(selectors) {\n  return selectors.nodes.map(function (node) {\n    if (node.type !== 'selector' || node.nodes.length !== 1) {\n      throw new Error('composition is only allowed when selector is single :local class name not in \"' + _cssSelectorTokenizer2['default'].stringify(selectors) + '\"');\n    }\n    node = node.nodes[0];\n    if (node.type !== 'nested-pseudo-class' || node.name !== 'local' || node.nodes.length !== 1) {\n      throw new Error('composition is only allowed when selector is single :local class name not in \"' + _cssSelectorTokenizer2['default'].stringify(selectors) + '\", \"' + _cssSelectorTokenizer2['default'].stringify(node) + '\" is weird');\n    }\n    node = node.nodes[0];\n    if (node.type !== 'selector' || node.nodes.length !== 1) {\n      throw new Error('composition is only allowed when selector is single :local class name not in \"' + _cssSelectorTokenizer2['default'].stringify(selectors) + '\", \"' + _cssSelectorTokenizer2['default'].stringify(node) + '\" is weird');\n    }\n    node = node.nodes[0];\n    if (node.type !== 'class') {\n      // 'id' is not possible, because you can't compose ids\n      throw new Error('composition is only allowed when selector is single :local class name not in \"' + _cssSelectorTokenizer2['default'].stringify(selectors) + '\", \"' + _cssSelectorTokenizer2['default'].stringify(node) + '\" is weird');\n    }\n    return node.name;\n  });\n}\n\nvar processor = _postcss2['default'].plugin('postcss-modules-scope', function (options) {\n  return function (css) {\n    var generateScopedName = options && options.generateScopedName || processor.generateScopedName;\n\n    var exports = {};\n\n    function exportScopedName(name) {\n      var scopedName = generateScopedName(name, css.source.input.from, css.source.input.css);\n      exports[name] = exports[name] || [];\n      if (exports[name].indexOf(scopedName) < 0) {\n        exports[name].push(scopedName);\n      }\n      return scopedName;\n    }\n\n    function localizeNode(node) {\n      var newNode = Object.create(node);\n      switch (node.type) {\n        case 'selector':\n          newNode.nodes = node.nodes.map(localizeNode);\n          return newNode;\n        case 'class':\n        case 'id':\n          var scopedName = exportScopedName(node.name);\n          newNode.name = scopedName;\n          return newNode;\n      }\n      throw new Error(node.type + ' (\"' + _cssSelectorTokenizer2['default'].stringify(node) + '\") is not allowed in a :local block');\n    }\n\n    function traverseNode(node) {\n      switch (node.type) {\n        case 'nested-pseudo-class':\n          if (node.name === 'local') {\n            if (node.nodes.length !== 1) {\n              throw new Error('Unexpected comma (\",\") in :local block');\n            }\n            return localizeNode(node.nodes[0]);\n          }\n        /* falls through */\n        case 'selectors':\n        case 'selector':\n          var newNode = Object.create(node);\n          newNode.nodes = node.nodes.map(traverseNode);\n          return newNode;\n      }\n      return node;\n    }\n\n    // Find any :import and remember imported names\n    var importedNames = {};\n    css.walkRules(function (rule) {\n      if (/^:import\\(.+\\)$/.test(rule.selector)) {\n        rule.walkDecls(function (decl) {\n          importedNames[decl.prop] = true;\n        });\n      }\n    });\n\n    // Find any :local classes\n    css.walkRules(function (rule) {\n      var selector = _cssSelectorTokenizer2['default'].parse(rule.selector);\n      var newSelector = traverseNode(selector);\n      rule.selector = _cssSelectorTokenizer2['default'].stringify(newSelector);\n      rule.walkDecls(/composes|compose-with/, function (decl) {\n        var localNames = getSingleLocalNamesForComposes(selector);\n        var classes = decl.value.split(/\\s+/);\n        classes.forEach(function (className) {\n          var global = /^global\\(([^\\)]+)\\)$/.exec(className);\n          if (global) {\n            localNames.forEach(function (exportedName) {\n              exports[exportedName].push(global[1]);\n            });\n          } else if (hasOwnProperty.call(importedNames, className)) {\n            localNames.forEach(function (exportedName) {\n              exports[exportedName].push(className);\n            });\n          } else if (hasOwnProperty.call(exports, className)) {\n            localNames.forEach(function (exportedName) {\n              exports[className].forEach(function (item) {\n                exports[exportedName].push(item);\n              });\n            });\n          } else {\n            throw decl.error('referenced class name \"' + className + '\" in ' + decl.prop + ' not found');\n          }\n        });\n        decl.remove();\n      });\n\n      rule.walkDecls(function (decl) {\n        var tokens = decl.value.split(/(,|'[^']*'|\"[^\"]*\")/);\n        tokens = tokens.map(function (token, idx) {\n          if (idx === 0 || tokens[idx - 1] === ',') {\n            var localMatch = /^(\\s*):local\\s*\\((.+?)\\)/.exec(token);\n            if (localMatch) {\n              return localMatch[1] + exportScopedName(localMatch[2]) + token.substr(localMatch[0].length);\n            } else {\n              return token;\n            }\n          } else {\n            return token;\n          }\n        });\n        decl.value = tokens.join('');\n      });\n    });\n\n    // Find any :local keyframes\n    css.walkAtRules(function (atrule) {\n      if (/keyframes$/.test(atrule.name)) {\n        var localMatch = /^\\s*:local\\s*\\((.+?)\\)\\s*$/.exec(atrule.params);\n        if (localMatch) {\n          atrule.params = exportScopedName(localMatch[1]);\n        }\n      }\n    });\n\n    // If we found any :locals, insert an :export rule\n    var exportedNames = Object.keys(exports);\n    if (exportedNames.length > 0) {\n      (function () {\n        var exportRule = _postcss2['default'].rule({ selector: ':export' });\n        exportedNames.forEach(function (exportedName) {\n          return exportRule.append({\n            prop: exportedName,\n            value: exports[exportedName].join(' '),\n            raws: { before: '\\n  ' }\n          });\n        });\n        css.append(exportRule);\n      })();\n    }\n  };\n});\n\nprocessor.generateScopedName = function (exportedName, path) {\n  var sanitisedPath = path.replace(/\\.[^\\.\\/\\\\]+$/, '').replace(/[\\W_]+/g, '_').replace(/^_|_$/g, '');\n  return '_' + sanitisedPath + '__' + exportedName;\n};\n\nexports['default'] = processor;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-postcss-modules/node_modules/postcss-modules-values/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _icssReplaceSymbols = require('icss-replace-symbols');\n\nvar _icssReplaceSymbols2 = _interopRequireDefault(_icssReplaceSymbols);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar matchImports = /^(.+?|\\([\\s\\S]+?\\))\\s+from\\s+(\"[^\"]*\"|'[^']*'|[\\w-]+)$/;\nvar matchValueDefinition = /(?:\\s+|^)([\\w-]+):?\\s+(.+?)\\s*$/g;\nvar matchImport = /^([\\w-]+)(?:\\s+as\\s+([\\w-]+))?/;\nvar options = {};\nvar importIndex = 0;\nvar createImportedName = options && options.createImportedName || function (importName /*, path*/) {\n  return 'i__const_' + importName.replace(/\\W/g, '_') + '_' + importIndex++;\n};\n\nexports.default = function (css, result) {\n  var importAliases = [];\n  var definitions = {};\n\n  var addDefinition = function addDefinition(atRule) {\n    var matches = void 0;\n    while (matches = matchValueDefinition.exec(atRule.params)) {\n      var _matches = matches;\n\n      var _matches2 = _slicedToArray(_matches, 3);\n\n      var /*match*/key = _matches2[1];\n      var value = _matches2[2];\n      // Add to the definitions, knowing that values can refer to each other\n\n      definitions[key] = (0, _icssReplaceSymbols.replaceAll)(definitions, value);\n      atRule.remove();\n    }\n  };\n\n  var addImport = function addImport(atRule) {\n    var matches = matchImports.exec(atRule.params);\n    if (matches) {\n      var _matches3 = _slicedToArray(matches, 3);\n\n      var /*match*/aliases = _matches3[1];\n      var path = _matches3[2];\n      // We can use constants for path names\n\n      if (definitions[path]) path = definitions[path];\n      var imports = aliases.replace(/^\\(\\s*([\\s\\S]+)\\s*\\)$/, '$1').split(/\\s*,\\s*/).map(function (alias) {\n        var tokens = matchImport.exec(alias);\n        if (tokens) {\n          var _tokens = _slicedToArray(tokens, 3);\n\n          var /*match*/theirName = _tokens[1];\n          var _tokens$ = _tokens[2];\n          var myName = _tokens$ === undefined ? theirName : _tokens$;\n\n          var importedName = createImportedName(myName);\n          definitions[myName] = importedName;\n          return { theirName: theirName, importedName: importedName };\n        } else {\n          throw new Error('@import statement \"' + alias + '\" is invalid!');\n        }\n      });\n      importAliases.push({ path: path, imports: imports });\n      atRule.remove();\n    }\n  };\n\n  /* Look at all the @value statements and treat them as locals or as imports */\n  css.walkAtRules('value', function (atRule) {\n    if (matchImports.exec(atRule.params)) {\n      addImport(atRule);\n    } else {\n      if (atRule.params.indexOf('@value') !== -1) {\n        result.warn('Invalid value definition: ' + atRule.params);\n      }\n\n      addDefinition(atRule);\n    }\n  });\n\n  /* We want to export anything defined by now, but don't add it to the CSS yet or\n   it well get picked up by the replacement stuff */\n  var exportDeclarations = Object.keys(definitions).map(function (key) {\n    return _postcss2.default.decl({\n      value: definitions[key],\n      prop: key,\n      raws: { before: \"\\n  \" }\n    });\n  });\n\n  /* If we have no definitions, don't continue */\n  if (!Object.keys(definitions).length) return;\n\n  /* Perform replacements */\n  (0, _icssReplaceSymbols2.default)(css, definitions);\n\n  /* Add export rules if any */\n  if (exportDeclarations.length > 0) {\n    var exportRule = _postcss2.default.rule({\n      selector: ':export',\n      raws: { after: \"\\n\" }\n    });\n    exportRule.append(exportDeclarations);\n    css.prepend(exportRule);\n  }\n\n  /* Add import rules */\n  importAliases.reverse().forEach(function (_ref) {\n    var path = _ref.path;\n    var imports = _ref.imports;\n\n    var importRule = _postcss2.default.rule({\n      selector: ':import(' + path + ')',\n      raws: { after: \"\\n\" }\n    });\n    imports.forEach(function (_ref2) {\n      var theirName = _ref2.theirName;\n      var importedName = _ref2.importedName;\n\n      importRule.append({\n        value: theirName,\n        prop: importedName,\n        raws: { before: \"\\n  \" }\n      });\n    });\n\n    css.prepend(importRule);\n  });\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-postcss-modules/node_modules/postcss-modules/build/generateScopedName.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = generateScopedName;\n\nvar _stringHash = require('string-hash');\n\nvar _stringHash2 = _interopRequireDefault(_stringHash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction generateScopedName(name, filename, css) {\n  var i = css.indexOf('.' + name);\n  var lineNumber = css.substr(0, i).split(/[\\r\\n]/).length;\n  var hash = (0, _stringHash2.default)(css).toString(36).substr(0, 5);\n\n  return '_' + name + '_' + hash + '_' + lineNumber;\n}","/home/travis/build/npmtest/node-npmtest-postcss-modules/node_modules/postcss-modules/build/saveJSON.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = saveJSON;\n\nvar _fs = require('fs');\n\nfunction saveJSON(cssFile, json) {\n  (0, _fs.writeFileSync)(cssFile + '.json', JSON.stringify(json));\n}","/home/travis/build/npmtest/node-npmtest-postcss-modules/node_modules/postcss-modules/build/behaviours.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.behaviours = undefined;\nexports.getDefaultPlugins = getDefaultPlugins;\nexports.isValidBehaviour = isValidBehaviour;\n\nvar _cssModulesLoaderCore = require('css-modules-loader-core');\n\nvar _cssModulesLoaderCore2 = _interopRequireDefault(_cssModulesLoaderCore);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar behaviours = exports.behaviours = {\n  LOCAL: 'local',\n  GLOBAL: 'global'\n};\n\nfunction getDefaultPlugins(behaviour, generateScopedName) {\n  var _plugins;\n\n  var scope = _cssModulesLoaderCore2.default.scope({ generateScopedName: generateScopedName });\n\n  var plugins = (_plugins = {}, _defineProperty(_plugins, behaviours.LOCAL, [_cssModulesLoaderCore2.default.values, _cssModulesLoaderCore2.default.localByDefault, _cssModulesLoaderCore2.default.extractImports, scope]), _defineProperty(_plugins, behaviours.GLOBAL, [_cssModulesLoaderCore2.default.values, _cssModulesLoaderCore2.default.extractImports, scope]), _plugins);\n\n  return plugins[behaviour];\n}\n\nfunction isValidBehaviour(behaviour) {\n  return Object.keys(behaviours).map(function (key) {\n    return behaviours[key];\n  }).indexOf(behaviour) > -1;\n}"}